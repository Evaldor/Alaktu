@page "/piplines"
@using Radzen
@using AlaktuManager.Client.Services
@using AlaktuManager.Shared
@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService

<PageTitle>Alaktu. Manage piplines</PageTitle>

<h1>Manage piplines</h1>

    <RadzenButton Click=@(args => EditPipline("null")) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />

    <RadzenDataGrid 
        IsLoading="@isLoading" 
        Count="@count" 
        Data="@piplines" 
        TItem="Pipline"
        LoadData="@OnInitializedAsync" 
        SelectionMode="DataGridSelectionMode.Single" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
        FilterMode="FilterMode.Advanced" 
        AllowSorting="true" 
        AllowFiltering="true" 
        AllowPaging="true" 
        PageSize="6" 
        PagerHorizontalAlign="HorizontalAlign.Center" 
        CellContextMenu="@OnCellContextMenu"
        >
    
        <Columns>
            <RadzenDataGridColumn TItem="Pipline" Property="IsEnabled" Title="Is Enabled" Frozen="true" Width="40px" >
                <Template Context="pipline">
                    <RadzenCheckBox @bind-Value="pipline.IsEnabled" Name="Is enabled" Disabled="true"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Pipline" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Pipline" Property="Name" Title="Name" Frozen="true" Width="200px" />
            <RadzenDataGridColumn TItem="Pipline" Property="SourceType.Name" Title="Source Type" Frozen="true" Width="140px" />
            <RadzenDataGridColumn TItem="Pipline" Property="LastProcessedAt" Title="Last Processed At" Frozen="true" Width="140px" >
                <Template Context="pipline">
                    @String.Format("{0:d}", pipline.LastProcessedAt)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Pipline" Property="LastProcessedStatus" Title="Last Processed Status" Frozen="true" Width="140px" />
        </Columns>
    </RadzenDataGrid>

@code {

    bool isLoading;
    int count;
    public IList<Pipline> piplines { get; set; }
    Pipline? selectedPipline;

    [Inject]
    public IService<Pipline> piplineService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        piplines = (await piplineService.GetView()).ToList();
        selectedPipline = piplines.First<Pipline>();

        count = piplines.Count;

        isLoading = false;
    }

    void OnCellContextMenu(DataGridCellMouseEventArgs<Pipline> args)
    {
        selectedPipline = args.Data;

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Enable", Value = 1 },
                new ContextMenuItem(){ Text = "Disable", Value = 2 },
                new ContextMenuItem(){ Text = "Edit", Value = 3 },
                new ContextMenuItem(){ Text = "Delete", Value = 4 },
            },
            (e) =>
            {
                OnMenuItemClick((int)e.Value);
            });


    }

    void OnMenuItemClick(int menuItem)
    {
        if (menuItem == 1)
        {
            selectedPipline.IsEnabled = true;
            UpdateRow(selectedPipline);
            NavigationManager.NavigateTo("/piplines/",true);
        }
        if (menuItem == 2)
        {
            selectedPipline.IsEnabled = false;
            UpdateRow(selectedPipline);
            NavigationManager.NavigateTo("/piplines/",true);
        }
        if (menuItem == 3)
        {
            EditPipline(selectedPipline.Id.ToString());
        }
        if (menuItem == 4)
        {
            DeleteRow(selectedPipline);
            NavigationManager.NavigateTo("/piplines/",true);
        }

        
    }

    void UpdateRow(Pipline pipline)
    {
        piplineService.Update(pipline);
    }

    async Task DeleteRow(Pipline pipline)
    {
        await piplineService.Delete(pipline.Id);
        piplines.Remove(pipline);
    }

    private void EditPipline(string piplineId)
    {
        string path = "/piplines/edit/" + piplineId;
        NavigationManager.NavigateTo(path);
    }
}